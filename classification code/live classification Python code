{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "62886fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# below details the logic behind the code \n",
    "# and the intention of what we want it to achieve \n",
    "\n",
    "# goal is to create an event classification function \n",
    "# once an event has been detected in our previous code, this function will then be run\n",
    "# will classify the text file as being a specific kind of eye movement\n",
    "# the model has been trained beforehand and is then called\n",
    "\n",
    "# have downloaded all the eye movement data from github \n",
    "# sorted it into different eye movements (up/down/left/right/static/etc.)\n",
    "# can then choose what types of movements we want to train it on\n",
    "\n",
    "# function will take in a text file and output a label\n",
    "# will use random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "fe4b2e1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# loading packages \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "6fa23af5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Label                                               Data\n",
      "0  right  [2.5503625405089, 25.2599366509078, 25.4775252...\n",
      "1  right  [0.493260039543543, 67.8229558014826, 68.36925...\n",
      "2  right  [2.75057737274778, 112.900990674505, 113.81498...\n",
      "3  right  [0.264083297185266, -13.2428408194973, -13.308...\n",
      "4  right  [4.58043415138604, 103.296491526989, 104.11848...\n",
      "\n",
      "0             right\n",
      "1             right\n",
      "2             right\n",
      "3             right\n",
      "4             right\n",
      "          ...      \n",
      "72    eyebrow_raise\n",
      "73    eyebrow_raise\n",
      "74    eyebrow_raise\n",
      "75    eyebrow_raise\n",
      "76    eyebrow_raise\n",
      "Name: Label, Length: 77, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# reading in all the eye movement files\n",
    "# storing them as a dataframe with two columns: label and data\n",
    "# label is the eye movement type (ex: up)\n",
    "# data is a list of the numbers that were within the file \n",
    "\n",
    "# whoever is running the code will need to change this \n",
    "\n",
    "main_folder = '/Users/sfoulsham/Desktop/data3888/classifier_data'\n",
    "\n",
    "data = []\n",
    "\n",
    "# iterating over each folder in the main folder\n",
    "\n",
    "for folder_name in os.listdir(main_folder):\n",
    "    folder_path = os.path.join(main_folder, folder_name)\n",
    "    \n",
    "    # if the item is a folder\n",
    "    \n",
    "    if os.path.isdir(folder_path):\n",
    "        \n",
    "        # iterate over each file in that folder \n",
    "        \n",
    "        for file_name in os.listdir(folder_path):\n",
    "            file_path = os.path.join(folder_path, file_name)\n",
    "            \n",
    "            # if the item is a file \n",
    "            \n",
    "            if os.path.isfile(file_path):\n",
    "                \n",
    "                # store the file content as a list \n",
    "                \n",
    "                try:\n",
    "                    with open(file_path, 'r', encoding='utf-8') as file:\n",
    "                        numbers = file.read().splitlines()\n",
    "                except UnicodeDecodeError:\n",
    "                    continue\n",
    "                \n",
    "                # creating a dictionary \n",
    "                # with the folder name as the label and file contents as the data \n",
    "                \n",
    "                data.append({'Label': folder_name, 'Data': numbers})\n",
    "\n",
    "# making into a dataframe \n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# checking the output \n",
    "\n",
    "print(df.head())\n",
    "print()\n",
    "print(df['Label'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "d4453ce7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8125\n"
     ]
    }
   ],
   "source": [
    "# now creating our random forest model \n",
    "\n",
    "def train_random_forest(dataframe):\n",
    "\n",
    "    X = pd.DataFrame(dataframe['Data'].values.tolist())\n",
    "    y = dataframe['Label']\n",
    "    \n",
    "    # handling missing \n",
    "    imputer = SimpleImputer(strategy='mean')\n",
    "    X = imputer.fit_transform(X)\n",
    "    \n",
    "    # splitting the data into training and testing sets \n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    \n",
    "    scaler = StandardScaler()\n",
    "    X_train = scaler.fit_transform(X_train)\n",
    "    X_test = scaler.transform(X_test)\n",
    "    \n",
    "    clf = RandomForestClassifier()\n",
    "    \n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    y_pred = clf.predict(X_test)\n",
    "    \n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    print(\"Accuracy:\", accuracy)\n",
    "    \n",
    "    return clf\n",
    "\n",
    "trained_classifier = train_random_forest(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f9912c53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "right\n",
      "left\n",
      "eyebrow_raise\n",
      "eyebrow_raise\n"
     ]
    }
   ],
   "source": [
    "def classify_eye_movement(file_path, classifier):\n",
    "\n",
    "    # reading in the file \n",
    "    \n",
    "    try:\n",
    "        with open(file_path, 'r', encoding='utf-8') as file:\n",
    "            numbers = file.read().splitlines()\n",
    "    except UnicodeDecodeError:\n",
    "        print(\"Unable to read the file due to encoding issues.\")\n",
    "        return None\n",
    "    \n",
    "    # preprocessing the data to match the format expected by the classifier\n",
    "    \n",
    "    # converting the numbers to float values \n",
    "    \n",
    "    try:\n",
    "        numbers = [float(num) for num in numbers]\n",
    "    except ValueError:\n",
    "        print(\"Error converting string data to float values.\")\n",
    "        return None\n",
    "    \n",
    "    # want the file to have the same number of features that the classifier was trained on\n",
    "    # if the number of features is less than expected, pad with zeros \n",
    "    \n",
    "    if len(numbers) < 199960:\n",
    "        numbers += [0] * (199960 - len(numbers))\n",
    "    \n",
    "    # also address if the features is more than expected\n",
    "    \n",
    "    elif len(numbers) > 199960:\n",
    "        numbers = numbers[:199960]\n",
    "    \n",
    "    # converting to a numpy array with a single row \n",
    "    \n",
    "    X = np.array([numbers])\n",
    "    \n",
    "    predicted_label = classifier.predict(X)[0]\n",
    "    \n",
    "    return predicted_label\n",
    "\n",
    "# practicing\n",
    "\n",
    "print(classify_eye_movement('/Users/sfoulsham/Desktop/data3888/testing_examples/r1.txt', \n",
    "                            trained_classifier))\n",
    "\n",
    "print(classify_eye_movement('/Users/sfoulsham/Desktop/data3888/testing_examples/l1.txt', \n",
    "                            trained_classifier))\n",
    "\n",
    "print(classify_eye_movement('/Users/sfoulsham/Desktop/data3888/testing_examples/s1.txt', \n",
    "                            trained_classifier))\n",
    "\n",
    "print(classify_eye_movement('/Users/sfoulsham/Desktop/data3888/testing_examples/er1.txt', \n",
    "                            trained_classifier))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
